version: '3.8'

services:
  db:
    image: postgres:14
    environment:
      POSTGRES_DB: ${DB_NAME:-tg_shop_bot}
      POSTGRES_USER: ${DB_USER:-django_admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-12345}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-django_admin} -d ${DB_NAME:-tg_shop_bot}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  admin_panel:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./admin_panel/media:/app/admin_panel/media
      - .logs:/app/.logs
    environment:
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME:-admin}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD:-admin}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL:-admin@example.com}
    env_file:
      - ./admin_panel/.env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "
      until nc -vz db 5432; do
        echo 'Waiting for PostgreSQL...'
        sleep 2
      done;
      python admin_panel/manage.py migrate --noinput &&
      python admin_panel/manage.py createsuperuser --noinput || true &&
      python admin_panel/manage.py runserver 0.0.0.0:8000
      "
    networks:
      - app_network

  telegram_bot:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./admin_panel/media:/app/admin_panel/media
      - .logs:/app/.logs
    env_file:
      - ./telegram_bot/.env
    ports:
      - "3001:3001"
    depends_on:
      db:
        condition: service_healthy
      admin_panel:
        condition: service_started
    command: python telegram_bot/main.py
    networks:
      - app_network

volumes:
  postgres_data:
  media_volume:
    driver: local

  logs:

networks:
  app_network:
    driver: bridge
